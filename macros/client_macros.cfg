#[gcode_macro INIT_FILAMENT_SETTINGS]
#gcode:
#    {% set svv = printer.save_variables.variables %}
    #set_gcode_offset z={svv.filament_bed_offset}
#    set_gcode_offset z_adjust={svv.filament_offset}
#    SET_RETRACTION RETRACT_LENGTH={svv.filament_retract_length}
#    SET_RETRACTION RETRACT_SPEED={svv.filament_retract_speed}
#    SET_RETRACTION UNRETRACT_EXTRA_LENGTH={svv.filament_extra_restart_length}
#    SET_RETRACTION UNRETRACT_SPEED={svv.filament_restart_speed}
#    SET_PRESSURE_ADVANCE ADVANCE={svv.filament_pressure_advance}

# Extruder Warm-up Macro used by Fluildd/Mainsail Presets to load values from the filaments config file
[gcode_macro _SET_TEMP_TOOL]
gcode:
    {% set svv = printer.save_variables.variables %}
    #NEOPIXEL_DISPLAY LED="my_neopixel" TYPE=extruder_temp MODE=glow
    STATUS_NOZZLE_HEATING
    M104 S{svv.filament_print_temp}

# Bed Warm-up Macro used by Fluildd/Mainsail Presets to load values from the filaments config file
[gcode_macro _SET_TEMP_BED]
gcode:
    {% set svv = printer.save_variables.variables %}
    #NEOPIXEL_DISPLAY LED="my_neopixel" TYPE=bed_temp MODE=glow
    STATUS_BED_HEATING
    M140 S{svv.filament_bed_temp}

[gcode_macro SET_HEATER_TEMPERATURE]
description: Pauses the printer
rename_existing: SET_HEATER_TEMPERATURE_BASE
gcode:
    status_heating
    SET_HEATER_TEMPERATURE_BASE {rawparams}
    STATUS_READY

#[gcode_macro TURN_OFF_HEATERS]
#description: Pauses the printer
#rename_existing: TURN_OFF_HEATERS_BASE
#gcode:
#    STATUS_LEVELING
#    TURN_OFF_HEATERS_BASE
#    STATUS_READY

[gcode_macro status_nozzle_heating]
gcode:
    # STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_nozzle_heating

[gcode_macro status_bed_heating]
gcode:
    # STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=sb_logo_heating

#[gcode_macro LIGHTS]
#gcode:
#  SET_PIN PIN=light VALUE={(not printer['output_pin light'].value)|int}  

# Lighting Control
[gcode_macro lights_off]
gcode:
      SET_PIN PIN=light VALUE=0

[gcode_macro lights_on]
gcode:
      SET_PIN PIN=light VALUE=100

[gcode_macro smartlight_off]
gcode:
    {action_call_remote_method(
    "set_device_power", device="smarthome_light", state="off"
    )}

[gcode_macro smartlight_on]
gcode:
    {action_call_remote_method(
    "set_device_power", device="smarthome_light", state="on"
    )}.

#[gcode_macro LIGHTS]
#gcode:
#    {% if printer["output_pin light"].value == 100 %}
#        lights_off
#    {% else %}
 #       lights_on
  #  {% endif %}

#[delayed_gcode welcome]
#initial_duration: 2.
#gcode:
#    M117 Filament Settings Applied
#    INIT_FILAMENT_SETTINGS
#    UPDATE_DELAYED_GCODE ID=clear_display DURATION=5

[delayed_gcode clear_display]
gcode:
    M117

[gcode_macro NOTIFY_FILAMENT_CHANGE]
gcode:
  {action_call_remote_method("notify",
                             name="my_telegram_notifier",
                             message="Filament change needed!")}


[gcode_macro MOTORS_OFF]
gcode:
    M84                     ;steppers off

[gcode_macro M300]
description: Genarates a Beeper Tone of 1khz for 10ms or S as the tone parameter and P as the duration parameter
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER VALUE=1 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER VALUE=0

[gcode_macro m201]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set accel = (params.X|default(params.Y)|float,
                    params.Y|default(params.X)|float)|min %}
      SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel * 0.5}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro m203]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY={speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M205]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set corner_speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={corner_speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M900]
gcode:
      SET_PRESSURE_ADVANCE ADVANCE={params.K}

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}


[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}