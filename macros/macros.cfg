[gcode_macro M73]
rename_existing: M73.1
variable_p: 0.0
variable_r: 0.0
gcode:
   {% set P = params.P|default(0)|int %}
   {% set R = params.R|default(0)|int %}
   M73.1 P{P}
   SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
   SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}


[display_template _printing_time]
text:
   {% set ptime = printer["gcode_macro M73"].r %}
   { "%02d:%02d" % (ptime // 60, ptime % 60) }
   # M117 { "%02d:%02d" % (ptime // 60, ptime % 60) } remaining


######################### PRINT START / END #########################
[gcode_macro CALIBRATE_PIDS]
gcode:
    {% set heater = params.HEATER|default('extruder')|string|lower %}
    {% set target = params.TARGET|default(230)|int %}
    {% set write_file = params.WRITE_FILE|default(0)|int %}

    PID_CALIBRATE HEATER={heater} TARGET={target} WRITE_FILE={write_file}

[gcode_macro PRINT_PA_CALIBRATION_TUNE]
gcode:
    #{% set bed = params.BED|default(255)|int %}
    #{% set hotend = params.HOTEND|default(140)|int %}
    #{% set chamber = params.CHAMBER|default(0)|int %}
	#START_PRINT BED={bed} HOTEND=255 CHAMBER={chamber}
	PRESSURE_ADVANCE_CALIBRATION START=0.02 INCREMENT=0.0025 RAFT=1 OUTER_SPEED=20 INNER_SPEED=150 PURGE_MM=4 LINES_PER_BAND=4
	#END_PRINT

[gcode_macro PRINT_EXTRUSION_MULTIPLIER_TOOL]
gcode:
    FLOW_MULTIPLIER_CALIBRATION FAN_SPEED+40 EXTRUSION_WIDTH=0.6 EXTRUSION_MULTIPLIER=0.93 RAFT_SPEED=30 PURGE_MM=4
    # COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx

[gcode_macro START_PRINT]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
variable_secondbedtemp: 0
gcode:      
    # Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set secondbed = params.SECONDBED|default(3)|int %}

    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=hotendtemp VALUE={hotend} 
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chambertemp VALUE={chamber} 
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=secondbedtemp VALUE={secondbed}    
    CLEAR_PAUSE                                                                          ; clear pause
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                       ; cancel off timer (if there is one)
    #SET_PIN PIN=caselight VALUE=1                                                        ; turn on case light
    _RESETSPEEDS                                                                         ; reset speed, accel etc to configured values
    #SERVICE_STOP
    #RESETRGB                                                                             ; reset LCD RGB
    #SET_NOZZLE_LEDS_BY_NAME COLOR="WHITE"                                                ; turn on nozzle LEDs
    #SET_LOGO_LEDS_BY_NAME COLOR="WHITE"                                                  ; set logo LEDs back to white
    #status_homing
    M104 S140  
    M140 S{bed}                                                                          ; set bed to target temp
    G28                                                                                  ; home
    SET_GCODE_OFFSET Z=0 MOVE=1
    G90                                                                                  ; absolute positioning
    {% if printer['temperature_sensor chamber'].temperature < chamber or printer.heater_bed.temperature < (bed-2)  %}   #{% if printer['z_thermal_adjust'].temperature < chamber or printer.heater_bed.temperature < (bed-2)  %}
        HEATSOAK T={bed} C={chamber} MOVE=1 WAIT=1                                       ; heatsoak macro + park in center
    {% else %}                                                                           ; - if chamber is already at temp:
        HEATSOAK T={bed} C={chamber} MOVE=0 WAIT=1                                       ; "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
    {% endif %} 
    M190 S{bed}                                                                          ; wait for bed temp
    #SET_LOGO_LEDS_BY_NAME COLOR="WHITE"                                                 ; set logo LEDs back to white
    #ATTACH_PROBE_LOCK                                                                    ; attach klicky + lock
    M104 S140 
    Z_TILT_ADJUST                                                                        ; quad gantry level
    CLEANNOZZLE                                                                          ; clean nozzle while hot
    G28 Z          # redundant possibly as Z tilt will always home Z after adjustment/checking                                                                      ; home z
    M104 S0 
    G90                                                                                  ; absolute positioning
    #M104 S{hotend}
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F9500   ; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
    BED_MESH_CALIBRATE                                                                   ; mesh
    BED_MESH_PROFILE LOAD=default                                                        # Temp "32.0" 
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z
    #SERVICE_START
    #DOCK_PROBE_UNLOCK                                                                    ; stow probe, unlock
    G0 X260 Y219.5 F9500                                                                 ; move to right of nozzle brush
    #status_heating
    M104 S{hotend}
    M99109 S{hotend}                                                                       ; set & wait for hotend final temp
    G1 E-4 F3600                                                                         # Retract filament   

    G1 E-3 F3600 
    ;G28 Z                                                                                ; one more Z home with hot nozzle
    ;G0 X260 Y292 F9500 
        #CALIBRATE_Z                                                                          ; calibrate z offset with hot nozzle
    SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(-0.01)|float} MOVE=1
    _SWIPENOZZLE                                                                         ; swipe nozzle brush on way to print purge line
    G1 E5 F3600                                                                          # un-Retract filament  (undo -12mm in END Print)
    #G1 E7 F3600                                                                          # un-Retract filament  (as above plus -7mm afterhotend reached temp)
    G92 E0                                                                               ; reset Extruder
    G1 X1 Y20 Z0.3 F9500.0                                                               ; move to start position
    G1 X1 Y200.0 Z0.3 F1500.0 E15                                                        ; draw the first line
    G92 E0                                                                               ; reset Extruder
    G1 Z10.0 F3000                                                                        ; move Z Axis up
    status_printing                                                                      ; Set neopixels
   
[gcode_macro END_PRINT]
gcode:
    #RESETRGB                                                                             ; revert LCD RGB
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0                                            ; disable filament sensor
    CLEAR_PAUSE                                                                           ; clear pause
    #M191 S0                                                                              ; (TEST) disable bed fans                                              
    M400                                                                                  ; wait for buffer to clear
    G92 E0                                                                                ; zero the extruder
    G1 E-5 F3600                                                                          # Retract filament
    M104 S0                                                                               ; turn only the hotend off
    #{% if printer["gcode_macro START_PRINT"].chambertemp|int != 0 %}
    #    M140 S{printer["gcode_macro START_PRINT"].bedtemp|int}                           ; return the bed to temp, slicers like to turn it off
    {% if printer["gcode_macro START_PRINT"].chambertemp|int != 0 %}
        {% if printer["gcode_macro START_PRINT"].secondbedtemp|int != 3 %}
            M140 S{printer["gcode_macro START_PRINT"].secondbedtemp|int}                  ; return the bed to temp, slicers like to turn it off       
        {% else %}
            M140 S{printer["gcode_macro START_PRINT"].bedtemp|int}                        ; return the bed to temp, slicers like to turn it off 
        {% endif %}
    {% else %}
        M140 S0
    {% endif %}
    M107                                                                                 ; turn off part cooling fan
    G91                                                                                  ; relative positioning
    G1 Z30 F3000                                                                         ; move nozzle up 5mm
    G90                                                                                  ; absolute positioning
    G1 E-4 F3600                                                                         # Retract filament even more
    #G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y - 10} F9500.0    ; park nozzle at rear                                  
    G1 X30 Y{printer.toolhead.axis_maximum.y - 30} F9500.0                               ; park nozzle at rear        
    G4 P1000                                                                              # Wait a second   
    G1 E-3 F3600                                                                         # Retract filament even more 
    BED_MESH_CLEAR                                                                       #clear the mesh
    status_cooling                   
   # {% if printer["gcode_macro START_PRINT"].chamber|int != 0 %}
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600                                     ; turn everything off in 10 min
   # {% endif %}
    _RESETSPEEDS                                                                         ; reset speed, accel etc to configured max values

    #SET_NOZZLE_LEDS_BY_NAME COLOR="OFF"                                                  ; turn off nozzle LEDs
    #BEEP I=3                                                                             ; beep 3 times

[gcode_macro _PARK_Z]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
    SAVE_GCODE_STATE NAME=PARKZ
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg

    {% set z_park_delta = 10.0 %}
    #### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - z_park_delta) %}
        {% set z_safe = z_park_delta %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    {% if "xyz" in printer.toolhead.homed_axes %}
        G91
        G1 Z{z_safe} F900
        G90
    {% else %}
        {action_respond_info("Printer not homed")}
    {% endif %}
    RESTORE_GCODE_STATE NAME=PARKZ


[delayed_gcode DELAYED_OFF]
gcode:
    OFF ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)
    status_part_ready
    
[delayed_gcode DELAYED_HOTEND_OFF]
gcode:
    M104 S0                                                                             ; turn off hotend

[gcode_macro CLEANNOZZLE]
gcode:
    # Parameters
    # Iterations
    {% set i = params.I|default(4)|int %}
    # Speed
    {% set s = params.S|default(100)|int %}
    _CG28
    SAVE_GCODE_STATE NAME=CLEANNOZZLE
    #status_cleaning
    G90                                                  ; absolute positioning
    G0 X90 Z15 Y{printer.toolhead.axis_maximum.y} F9500   ; move to right of nozzle brush
    # G0 X287.4 F9500                                        ; move to nozzle brush
    G0 Z10 F9500                                          ; move down to nozzle brush
    {% for iteration in range(i|int) %}
        G0 X40 F{s*60}                                    ; wipe back
        G0 X80 F{s*60}                                   ; wipe forth
    {% endfor %}
    G0 X90 F{s*60}                                        ; wipe back
    #G0 Y219.5 F{s*60}                                       ; wipe back
    G0 Z15 F9500                                         ; raise
    # G0 X260 Y219.5 F9500                                    ; move to LEFT of nozzle brush
    RESTORE_GCODE_STATE NAME=CLEANNOZZLE
    
[gcode_macro _SWIPENOZZLE]
gcode:
    _CG28
    #status_cleaning
    SAVE_GCODE_STATE NAME=SWIPENOZZLE
    G90                                                  ; absolute positioning
    G0 X90 Z15 Y{printer.toolhead.axis_maximum.y} F9500 ; move to right of nozzle brush
    G0 Z10   F9500                                        ; lower
    G0 X40 F2400                                          ; wipe back 

    #G0 X260 Z10 Y186.5 F9500                                 ; move to LEFT of nozzle brush
    #G0 X287.2 F9500                                        ; move to nozzle brush
    #G0 Z2.5 F9500                                          ; move down to nozzle brush
    #G0 Y219.5 F2400                                         ; wipe back
    G0 Z15 F9500                                         ; raise
    #G0 X260 Y219.5 F9500                                    ; move to LEFT of nozzle brush
    RESTORE_GCODE_STATE NAME=SWIPENOZZLE
    
    
######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    END_PRINT
    BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(50)|int %}                                                  ; z hop amount
    status_paused
    #BEEP I=5 dur=1000
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0                                 ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume                
        BASE_PAUSE                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that zhop doesn't exceed z max
            G91                                                                             ; relative positioning
            G1 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F9500 ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        UPDATE_DELAYED_GCODE ID=DELAYED_HOTEND_OFF DURATION=480                                    ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                      ; set timeout to 12 hours
    {% endif %}

# Return Z hop back down, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    status_printing
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1                                                              ; enable filament sensor
        #RESETRGB                                                                                                         ; reset LCD color
        #SET_LOGO_LEDS_BY_NAME COLOR="WHITE"                                                                              ; set logo LEDs back to white
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                      ; set timeout back to configured value
        UPDATE_DELAYED_GCODE ID=DELAYED_HOTEND_OFF DURATION=0 
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                            ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                              ; relative positioning
        M83                                                                                                              ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                             
            G1 Z{zhop * -1} E{e} F900                                                                                    ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position
        BASE_RESUME                                                                                                      ; resume print
    {% endif %}

# Filament runout / change alias    
[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0                  # Turn LCD green
#    SET_LOGO_LEDS_BY_NAME COLOR="GREEN" # Turn logo green                                  #########################
    PAUSE
    
# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END, and in PAUSE/RESUME)
[delayed_gcode DISABLEFILAMENTSENSOR]   
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0
    
######################### SHELL COMMANDS #########################

# https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
# [gcode_macro BACKUP_CFG]
#gcode:
#    RUN_SHELL_COMMAND CMD=backup_cfg
    
#[gcode_shell_command backup_cfg]
#command: sh /home/pi/klipper_config/scripts/autocommit.sh
#timeout: 30.
#verbose: True

#[gcode_macro MEASURE_COREXY_BELT_TENSION]
#description: Generates resonance graph used to ensure belts are equally tensioned.
#gcode:
#    TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
#    TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
#    RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

#[gcode_shell_command generate_belt_tension_graph]
#command: /home/pi/klipper_config/scripts/generate-belt-tension-graph.sh
#timeout: 90.
#verbose: True

[gcode_macro FLASH_FIRMWARE_ALL]
description: Compiles firmware with currently installed klipper version for all supported RatOS boards. Note: this may take up to 10 minutes.
gcode:
    RESPOND MSG="Compiling and Flashing binarie to all MCUs.. This can take up to 10 minutes. Please do not turn off your Raspberry Pi!"
    RUN_SHELL_COMMAND CMD=firmware_flash_all
    RESPOND MSG="Firmware binaries upgrading has completed successfully! Please check the Log files for any errors!"

[gcode_macro SERVICE_STOP]
gcode:
    RESPOND MSG="Stopping Support Services"
    RUN_SHELL_COMMAND CMD=service_stop

[gcode_macro SERVICE_START]
gcode:
    RESPOND MSG="Starting Support Services"
    RUN_SHELL_COMMAND CMD=service_start

[gcode_shell_command firmware_flash_all]
command: /home/pi/klipper_config/scripts/firmware_flash_all.sh ls>>~/klipper_logs/firmware_update.log
timeout: 600.

[gcode_shell_command service_start]
command: /home/pi/klipper_config/scripts/service-start.sh
timeout: 30.

[gcode_shell_command service_stop]
command: /home/pi/klipper_config/scripts/service-stop.sh
timeout: 30.

#[gcode_shell_command generate_shaper_calibrate_graph_x]
#command: /home/pi/klipper_config/scripts/generate-shaper_calibrate-graph-x.sh
#timeout: 60.
#verbose: True

#[gcode_shell_command generate_shaper_calibrate_graph_y]
#command: /home/pi/klipper_config/scripts/generate-shaper_calibrate-graph-y.sh
#timeout: 60.
#verbose: True

#[gcode_macro SHAPER_CAL]
#gcode: 
#    RUN_SHELL_COMMAND CMD=rem_res_data
#    SHAPER_CALIBRATE AXIS=X FREQ_END=100
#    SHAPER_CALIBRATE AXIS=Y FREQ_END=100
#    RUN_SHELL_COMMAND CMD=gen_res_graph
#    SAVE_CONFIG

#[gcode_shell_command rem_res_data]
#command: sh /home/pi/rem_res_data.sh
#timeout: 30.
#verbose: True

#[gcode_shell_command gen_res_graph]
#command: sh /home/pi/gen_res_graph.sh
#timeout: 30.
#verbose: True

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True

######################### MISC #########################

# Calls my "OFF" macro to shut off everything (lights etc), turns off LCD lighting, then shuts down the Pi
[gcode_macro SHUTDOWN]
gcode:
    #LCDRGB R=0 G=0 B=0
    OFF
    {action_call_remote_method("shutdown_machine")}   ; Moonraker compatible

[gcode_macro REBOOT]
gcode:
    #LCDRGB R=0 G=0 B=0
    OFF
    {action_call_remote_method("reboot_machine")}  ; Moonraker compatible
    
[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(150)|int %}
    {% set c = params.C|default(35)|int %}
    # {% set c = params.C|default(30)|int %}
    {% set move = params.MOVE|default(1)|int %}
    {% set wait = params.WAIT|default(0)|int %}

    SAVE_GCODE_STATE NAME=HEATSOAK
    #status_heating
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0    ; cancel off timer (if there is one)
    #SET_PIN PIN=caselight VALUE=1                     ; turn on case light                                      ####################################
    M104 S0                                           ; turn off hotend
    M140 S{t}                                         ; heat bed
    #M141 S{c}                                         ; (TEST) start bed fans 
    M106 S182                                           # Run Part Fan @70%
    {% if move == 1 %}
        #SET_LOGO_LEDS_BY_NAME COLOR=ORANGE            ; set logo to orange
        #status_heating
        _CG28
        G90
        G0 Z{printer.toolhead.axis_maximum.z/2} F9500    
        G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F9500    
    {% endif %}
    {% if c > 30 and wait == 1 %}
        #TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={c-10} ; (TEST) wait for chamber temp - 10C
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={c} ; wait for chamber temp
        #TEMPERATURE_WAIT SENSOR="z_thermal_adjust" MINIMUM={c} ; wait for chamber temp
    {% endif %}
    M107                                                #stop part cooling fan
    #BEEP I=2                                                                             # Beep Twice
    RESTORE_GCODE_STATE NAME=HEATSOAK

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro _RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
    G28
    ATTACH_PROBE_LOCK
    #BED_MESH_CLEAR
    Z_TILT_ADJUST
    G28 Z
    DOCK_PROBE_UNLOCK

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}
    

######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
    # Define Cooldown variable witha default of False
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
        M117 Heating...
        # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
        M104 S{params.TEMP|default(255, true)}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
        # Set Cooldown=true variable if printer.extruder.can_extrude|lower == 'false' at macro inititation
    {% endif %}
    M83                                   ; set extruder to relative
    G1 E5 F600                           ; extrude a little to soften tip 
    G1 E-110 F1800                        ; retract filament completely
    # If Cooldown = true
    # M104 S0
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
        M117 Heating...
        # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
        M104 S{params.TEMP|default(255, true)}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
    {% endif %}
    M83 ; set extruder to relative
    G1 E140 F600
    RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
    # Parameters
    {% set t = params.T|default(255)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    UNLOAD_FILAMENT
    
[gcode_macro HOT_LOAD]
gcode:
    # Parameters
    {% set t = params.T|default(255)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    LOAD_FILAMENT

######################### CONDITIONALS #########################

# Conditional G28 (home if not already homed)
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro _CQGL]
gcode:
    {% if printer.Z_TILT_ADJUST.applied == False %}
        ; _CG28
        Z_TILT_ADJUST
        G28 Z
    {% endif %}
    
######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F9500        
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F9500                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park top rear left
[gcode_macro PARKREAR]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F9500     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F9500    
    RESTORE_GCODE_STATE NAME=PARKCENTER
    
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F9500                                     
    RESTORE_GCODE_STATE NAME=PARKBED
    
######################### ALIASES/SHORTCUTS #########################

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    #M141 S0                              ; (TEST) turn off bed fans
    M107                                 ; turn print cooling fan off
    #SET_PIN PIN=caselight VALUE=0        ; turn light off                                      ####################################
    #SET_NOZZLE_LEDS_BY_NAME COLOR="OFF"  ; turn nozzle LEDs off
    #SET_LOGO_LEDS_BY_NAME COLOR="WHITE"  ; set logo LED back to white
    
######################### TESTING #########################

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}