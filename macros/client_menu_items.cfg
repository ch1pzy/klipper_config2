# This adds the 'respond' G-Code that you can use to send commands back to OctoPrint
[respond]
default_type: echo

# The following section is to add a 'Calibration' menu item that allows easy access to many calibration settings

# Overwrite the main menu, add a 'power off' item and a 'calibration' submenu
#[menu __main]
#type: list
#name: Main Menu
#items:
#__command_power_off
#__tune
#__octoprint
#__sdcard
#__control
#__calibration
#__temp
#__filament
#__prepare
#__test

# This sends a power off command to Octoprint that gets picked up by the 'action commands' plug in
[menu __main __command_power_off]
type: command
name: Power off
gcode: RESPOND TYPE=command MSG=action:poweroff

[menu __main cancel]
name: Cancel Print
enable: {printer.idle_timeout.state == "Printing"}
type: command
gcode:
    CANCEL_PRINT

[menu __main __calibration]
type: list
name: Calibration
#items:
#__calibration_home_all_axes
#__calibration_bed_screws_adjust
#__calibration_bed_mesh_calibrate
#__calibration_screws_calculate
#__calibration_probe_calibrate
#__calibration_probe_accuracy
#__general_firmware_restart

[menu __main __calibration __accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __calibration __abort]
type: command
name: Abort
gcode: ABORT


[menu __main __calibration __screws_calculate]
type: command
name: Screw tilt calculate
gcode:
    G28
    SCREWS_TILT_CALCULATE

[menu __main __calibration __bed_screws_adjust]
type: list
name: Adjust screws

[menu __main __calibration __bed_screws_adjust]
type: command
name: Adjust screws
gcode:
    G28
    BED_SCREWS_ADJUST
#items:                                                             ########
#__calibration_accept
#__calibration_bed_screws_adjust_adjusted
#__calibration_save_config
#__calibration_abort

[menu __main __calibration __probe_accuracy]
type: command
name: Test accuracy
gcode:
    G28
    G0 X164 Y134 Z10 F6000
    PROBE_ACCURACY

[menu __main __calibration __save_config]
type: command
name: Save config
gcode: SAVE_CONFIG

[menu __main __calibration __general_firmware_restart]
type: command
name: Restart firmware
gcode: FIRMWARE_RESTART

[menu __main __calibration __home_all_axes]
type: command
name: Home XYZ
gcode: G28

[menu __main __calibration __bed_screws_adjust __adjusted]
type: command
name: Adjusted
gcode: ADJUSTED

[menu __main __calibration __probe_calibrate]
type: list
name: Adjust Z offset

[menu __main __calibration __probe_calibrate]
type: command
name: Adjust Z offset
gcode:
    G28
    G0 Z10 F6000
    PROBE_CALIBRATE
#items:
#__calibration__toolhead_zpos
#__calibration_probe_calibrate_testz_minus, __calibration_probe_calibrate_testz_plus
#__calibration_probe_calibrate_testz_minus_minus, __calibration_probe_calibrate_testz_plus_plus
#__calibration_probe_calibrate_testz_minus_1, __calibration_probe_calibrate_testz_plus_1
#__calibration_probe_calibrate_testz_minus_point_1, __calibration_probe_calibrate_testz_plus_point_1
#__calibration_accept
#__calibration_save_config
#__calibration_abort

[menu __main __calibration __probe_calibrate __toolhead_zpos]
type: command
name: Z = {'0:.3f'}

[menu __main __calibration __probe_calibrate __testz_minus]
type: command
name: " -0.5
gcode: TESTZ Z=-0.5

[menu __main __calibration __probe_calibrate __testz_plus]
type: command
name: " +0.5"
gcode: TESTZ Z=0.5

[menu __main __calibration __probe_calibrate __testz_minus_1]
type: command
name: " -1.0"
gcode: TESTZ Z=-1

[menu __main __calibration __probe_calibrate __testz_plus_1]
type: command
name: " +1.0"
gcode: TESTZ Z=+1

[menu __main __calibration __probe_calibrate __testz_minus_point_1]
type: command
name: " -0.1"
gcode: TESTZ Z=-0.1

[menu __main __calibration __probe_calibrate __testz_plus_point_1]
type: command
name: " +0.1"
gcode: TESTZ Z=+0.1

[menu __main __calibration __bed_mesh_calibrate]
type: list
name: Generate bed mesh

[menu __main __calibration __bed_mesh_calibrate]
type: command
name: Generate bed mesh
gcode:
    G28
    BED_MESH_CALIBRATE
    SAVE_CONFIG
#items:
#__calibration_card_bed_mesh

[menu __main __calibration __bed_mesh_calibrate __card_bed_mesh]
type: list
name: Calibration card
#content:
#"{0}"
#""
#" Will reboot"
#" when complete"
#items:
#__calibration_bed_mesh_calibrate_text_1

[menu __main __calibration __bed_mesh_calibrate __card_bed_mesh __text_1]
type: command
name: " [In progress]"


[menu __main __temp __preheat_pla __all_seq]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M190 S80
    M104 S205

[menu __main __temp __preheat_pla __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S205

[menu __main __temp __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S80

[menu __main __temp __preheat_pla __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all together
gcode:
    M140 S80
    M104 S205

[menu __main __temp __preheat_abs]
type: list
name: Preheat ABS

[menu __main __temp __preheat_abs __all_seq]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M190 S140
    M104 S255

[menu __main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S255

[menu __main __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S150

[menu __main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all together
gcode:
    M140 S150
    M104 S255

[menu __main __temp __preheat_petg]
type: list
name: Preheat PETG

[menu __main __temp __preheat_petg __all_seq]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M190 S118
    M104 S235

[menu __main __temp __preheat_petg __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S235

[menu __main __temp __preheat_petg __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S118

[menu __main __temp __preheat_petg __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all together
gcode:
    M140 S118
    M104 S235

[menu __main __octoprint]
type: disabled

[menu __main __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
gcode:
    {action_respond_info('action:pause')}

[menu __main __resume]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and printer.print_stats.state == "paused"}
name: Resume printing
gcode:
    {action_respond_info('action:resume')}

[menu __main __abort]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Abort printing
gcode:
    {action_respond_info('action:cancel')}

[menu __main __sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer)}
name: Fluidd Jobs

[menu __main __control __caselightonoff]
type: input
enable: {'output_pin light' in printer}
name: Lights: {'ON ' if menu.input else 'OFF'}
input: {printer['output_pin light'].value}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_PIN PIN=light VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type: input
enable: {'output_pin light' in printer}
name: Lights: {'%3d' % (menu.input*100)}%
input: {printer['output_pin light'].value}
input_min: 0.0
input_max: 1.0
input_step: 0.01
gcode:
    SET_PIN PIN=light VALUE={menu.input}


[display_data _default_20x4 extruder1]
position: 1, 0
text: { "%3.0f" % (printer.motion_report.live_velocity,) }
#text: { "{:^3.0%}mm/s".format(printer.motion_report.live_velocity) }
